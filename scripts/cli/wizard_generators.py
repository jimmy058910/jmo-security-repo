#!/usr/bin/env python3
"""
Artifact generators for the JMo Security wizard.

Extracted from wizard.py to reduce file size (959 â†’ ~750 lines).

Functions:
- generate_makefile_target(): Creates Makefile .PHONY target
- generate_shell_script(): Creates standalone Bash script
- generate_github_actions(): Creates GitHub Actions YAML workflow
"""

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Dict, List, cast

if TYPE_CHECKING:
    pass


def generate_makefile_target(
    config: Any, command: str, workflow_type: str = "repo"
) -> str:
    """
    Generate a Makefile target for security scanning.

    Args:
        config: Wizard configuration object
        command: Pre-generated jmotools command string
        workflow_type: Type of workflow (repo, stack, cicd, deployment, dependency)

    Returns:
        Makefile target content with workflow-specific targets
    """
    # Basic template for simple workflows
    if workflow_type in ["repo", "dependency"]:
        return f"""
# JMo Security Scan Target (generated by wizard)
.PHONY: security-scan
security-scan:
\t{command}

.PHONY: security-report
security-report:
\tjmo report ./results --profile

.PHONY: security-clean
security-clean:
\trm -rf results/
"""

    # Enhanced template for stack workflow
    elif workflow_type == "stack":
        return f"""
# JMo Security - Development Stack Scanning (generated by wizard)

.PHONY: security-scan-all
security-scan-all:
\t{command}

.PHONY: security-scan-repos
security-scan-repos:
\tjmo scan --repos-dir . --profile balanced

.PHONY: security-scan-images
security-scan-images:
\tjmo scan --images-file detected-images.txt --profile balanced

.PHONY: security-scan-iac
security-scan-iac:
\tjmo scan --terraform-state terraform/*.tfstate --profile balanced

.PHONY: security-scan-fast
security-scan-fast:
\tjmo scan --repos-dir . --profile fast

.PHONY: security-scan-deep
security-scan-deep:
\tjmo scan --repos-dir . --profile deep

.PHONY: security-report
security-report:
\tjmo report ./results --profile

.PHONY: security-clean
security-clean:
\trm -rf results/ detected-images.txt

.PHONY: help
help:
\t@echo "JMo Security - Available Targets:"
\t@echo "  security-scan-all    - Scan entire stack (repos + images + IaC)"
\t@echo "  security-scan-repos  - Scan repositories only"
\t@echo "  security-scan-images - Scan container images only"
\t@echo "  security-scan-iac    - Scan IaC files only"
\t@echo "  security-scan-fast   - Quick scan (5-8 minutes)"
\t@echo "  security-scan-deep   - Comprehensive scan (30-60 minutes)"
\t@echo "  security-report      - Generate report from results"
\t@echo "  security-clean       - Remove results directory"
"""

    # CI/CD template
    elif workflow_type == "cicd":
        return f"""
# JMo Security - CI/CD Audit (generated by wizard)

.PHONY: security-audit-ci
security-audit-ci:
\t{command}

.PHONY: security-audit-fast
security-audit-fast:
\tjmo ci --repos-dir . --profile fast --fail-on HIGH

.PHONY: security-check-pipelines
security-check-pipelines:
\tjmo scan --repo .github/workflows --tools trufflehog semgrep

.PHONY: security-check-images
security-check-images:
\tjmo scan --images-file pipeline-images.txt --tools trivy syft

.PHONY: security-report
security-report:
\tjmo report ./results --profile

.PHONY: security-clean
security-clean:
\trm -rf results/ pipeline-images.txt

.PHONY: help
help:
\t@echo "JMo Security - CI/CD Audit Targets:"
\t@echo "  security-audit-ci        - Full CI/CD security audit"
\t@echo "  security-audit-fast      - Fast CI/CD check (for pipelines)"
\t@echo "  security-check-pipelines - Scan pipeline files for secrets"
\t@echo "  security-check-images    - Scan container images from pipelines"
\t@echo "  security-report          - Generate report from results"
\t@echo "  security-clean           - Remove results directory"
"""

    # Deployment template
    elif workflow_type == "deployment":
        return f"""
# JMo Security - Pre-Deployment Checklist (generated by wizard)

.PHONY: security-check-staging
security-check-staging:
\tjmo ci --profile balanced --fail-on HIGH --image myapp:staging

.PHONY: security-check-production
security-check-production:
\tjmo ci --profile deep --fail-on CRITICAL --image myapp:production

.PHONY: security-sbom
security-sbom:
\tjmo scan --tools syft --profile fast --image myapp:latest

.PHONY: security-full-check
security-full-check:
\t{command}

.PHONY: security-report
security-report:
\tjmo report ./results --profile

.PHONY: help
help:
\t@echo "JMo Security - Pre-Deployment Targets:"
\t@echo "  security-check-staging     - Security gate for staging (fail on HIGH+)"
\t@echo "  security-check-production  - Security gate for production (fail on CRITICAL)"
\t@echo "  security-sbom              - Generate SBOM for deployment"
\t@echo "  security-full-check        - Full pre-deployment scan"
\t@echo "  security-report            - Generate report from results"
"""

    # Default fallback
    return f"""
# JMo Security Scan Target (generated by wizard)
.PHONY: security-scan
security-scan:
\t{command}
"""


def generate_shell_script(config: Any, command: str) -> str:
    """
    Generate a standalone shell script for security scanning.

    Args:
        config: Wizard configuration object
        command: Pre-generated jmotools command string

    Returns:
        Bash script content with shebang and error handling
    """
    return f"""#!/usr/bin/env bash
# JMo Security Scan Script (generated by wizard)
set -euo pipefail

{command}
"""


def generate_github_actions(config: Any, profiles: Dict[str, Any]) -> str:
    """
    Generate a GitHub Actions workflow for security scanning.

    Creates either Docker-based or native workflow depending on config.use_docker.
    Supports all 6 target types: repo, image, iac, url, gitlab, k8s.

    Args:
        config: Wizard configuration object
        profiles: PROFILES dictionary from wizard module

    Returns:
        GitHub Actions YAML workflow content
    """
    profile_info = profiles[config.profile]
    profile_threads = cast(int, profile_info["threads"])
    profile_timeout = cast(int, profile_info["timeout"])
    threads = config.threads or profile_threads
    timeout = config.timeout or profile_timeout

    # Detect required secrets based on target type
    setup_steps = []
    env_vars = []

    if config.target.type == "gitlab":
        setup_steps.append(
            """
      - name: Configure GitLab Access
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
        run: echo "GITLAB_TOKEN configured for GitLab scanning"
"""
        )
        env_vars.append("GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}")

    elif config.target.type == "k8s":
        setup_steps.append(
            """
      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          kubectl config view
"""
        )

    setup_steps_str = "".join(setup_steps)
    env_section = (
        f"\n        env:\n          {chr(10).join('          ' + e for e in env_vars)}"
        if env_vars
        else ""
    )

    if config.use_docker:
        # Docker-based workflow
        scan_cmd_lines = [
            f"jmo scan --results results --profile {config.profile}",
            f"--threads {threads}",
            f"--timeout {timeout}",
        ]

        # Add target-specific flags
        if config.target.type == "repo":
            scan_cmd_lines.insert(1, "--repo .")
        elif config.target.type == "image" and config.target.image_name:
            scan_cmd_lines.insert(1, f"--image {config.target.image_name}")
        elif config.target.type == "url" and config.target.url:
            scan_cmd_lines.insert(1, f"--url {config.target.url}")

        if config.fail_on:
            scan_cmd_lines.append(f"--fail-on {config.fail_on}")
        scan_cmd = " \\\n            ".join(scan_cmd_lines)

        return f"""name: Security Scan
on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: '0 0 * * 0'  # Weekly

jobs:
  security-scan:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/jimmy058910/jmo-security:latest
    steps:
      - uses: actions/checkout@v4
{setup_steps_str}
      - name: Run Security Scan{env_section}
        run: |
          {scan_cmd}

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: results/

      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/summaries/findings.sarif
"""
    else:
        # Native workflow
        scan_cmd_lines = [
            f"jmotools {config.profile}",
            f"--threads {threads}",
            f"--timeout {timeout}",
        ]

        # Add target-specific flags
        if config.target.type == "repo":
            if config.target.repo_mode == "repos-dir":
                scan_cmd_lines.insert(1, "--repos-dir .")
            elif config.target.repo_mode == "repo":
                scan_cmd_lines.insert(1, "--repo .")
        elif config.target.type == "image":
            if config.target.image_name:
                scan_cmd_lines.insert(1, f"--image {config.target.image_name}")
        elif config.target.type == "url":
            if config.target.url:
                scan_cmd_lines.insert(1, f"--url {config.target.url}")
        elif config.target.type == "iac":
            iac_flag_map = {
                "terraform": "--terraform-state",
                "cloudformation": "--cloudformation",
                "k8s-manifest": "--k8s-manifest",
            }
            # Note: File must exist in repo
            scan_cmd_lines.insert(
                1, f"{iac_flag_map[config.target.iac_type]} infrastructure"
            )
        elif config.target.type == "gitlab":
            if config.target.gitlab_repo:
                scan_cmd_lines.insert(1, f"--gitlab-repo {config.target.gitlab_repo}")
        elif config.target.type == "k8s":
            if config.target.k8s_context:
                scan_cmd_lines.insert(1, f"--k8s-context {config.target.k8s_context}")

        scan_cmd_lines.append("--results-dir results")

        if config.fail_on:
            scan_cmd_lines.append(f"--fail-on {config.fail_on}")
        scan_cmd = " \\\n            ".join(scan_cmd_lines)

        profile_tools = cast(List[str], profile_info["tools"])
        tools_list = ", ".join(profile_tools)

        # Add secrets note if needed
        secrets_note = ""
        if config.target.type == "gitlab":
            secrets_note = (
                "\n    # NOTE: Add GITLAB_TOKEN secret to repository settings"
            )
        elif config.target.type == "k8s":
            secrets_note = "\n    # NOTE: Add KUBECONFIG secret to repository settings"

        return f"""name: Security Scan{secrets_note}
on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: '0 0 * * 0'  # Weekly

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install JMo Security
        run: pip install jmo-security

      - name: Install Security Tools
        run: |
          # Install based on profile: {config.profile}
          # Tools: {tools_list}
          # See: https://github.com/jimmy058910/jmo-security-repo#tool-installation
{setup_steps_str}
      - name: Run Security Scan{env_section}
        run: |
          {scan_cmd}

      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: results/

      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/summaries/findings.sarif
"""


def generate_gitlab_ci(workflow_type: str = "repo", profile: str = "balanced") -> str:
    """
    Generate a GitLab CI configuration for security scanning.

    Args:
        workflow_type: Type of workflow (repo, stack, cicd, deployment, dependency)
        profile: Scan profile (fast, balanced, deep)

    Returns:
        GitLab CI YAML content
    """
    if workflow_type == "stack":
        return f"""# JMo Security - Development Stack Scanning (GitLab CI)
# Generated by wizard

stages:
  - security-scan
  - report

security-scan-all:
  stage: security-scan
  image: ghcr.io/jimmy058910/jmo-security:latest
  script:
    - jmo scan --repos-dir . --profile {profile}
  artifacts:
    paths:
      - results/
    reports:
      sast: results/summaries/findings.sarif
    expire_in: 30 days
  only:
    - main
    - merge_requests

security-report:
  stage: report
  image: ghcr.io/jimmy058910/jmo-security:latest
  script:
    - jmo report ./results --profile
  dependencies:
    - security-scan-all
  artifacts:
    paths:
      - results/summaries/
    expire_in: 30 days
  only:
    - main
"""

    elif workflow_type == "cicd":
        return f"""# JMo Security - CI/CD Audit (GitLab CI)
# Generated by wizard

stages:
  - security-audit

ci-security-audit:
  stage: security-audit
  image: ghcr.io/jimmy058910/jmo-security:latest
  script:
    - jmo ci --repos-dir . --profile {profile} --fail-on HIGH
  artifacts:
    paths:
      - results/
    reports:
      sast: results/summaries/findings.sarif
  only:
    - main
    - merge_requests
"""

    elif workflow_type == "deployment":
        return f"""# JMo Security - Pre-Deployment Check (GitLab CI)
# Generated by wizard

stages:
  - pre-deployment

deployment-security-check:
  stage: pre-deployment
  image: ghcr.io/jimmy058910/jmo-security:latest
  script:
    - jmo ci --profile {profile} --fail-on CRITICAL --image $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
      - results/
  only:
    - main
  when: manual
"""

    # Default template for repo/dependency workflows
    return f"""# JMo Security Scan (GitLab CI)
# Generated by wizard

stages:
  - security-scan

security-scan:
  stage: security-scan
  image: ghcr.io/jimmy058910/jmo-security:latest
  script:
    - jmo scan --repo . --profile {profile}
  artifacts:
    paths:
      - results/
    reports:
      sast: results/summaries/findings.sarif
    expire_in: 30 days
  only:
    - main
    - merge_requests
"""


def generate_docker_compose(
    workflow_type: str = "repo", profile: str = "balanced"
) -> str:
    """
    Generate a docker-compose.yml for security scanning.

    Args:
        workflow_type: Type of workflow (repo, stack, cicd, deployment, dependency)
        profile: Scan profile (fast, balanced, deep)

    Returns:
        docker-compose YAML content
    """
    if workflow_type == "stack":
        return f"""# docker-compose.security.yml
# JMo Security - Development Stack Scanning
# Generated by wizard

version: '3.8'

services:
  jmo-security:
    image: ghcr.io/jimmy058910/jmo-security:latest
    volumes:
      - .:/scan:ro
      - ./results:/scan/results
    command: >
      scan
      --repos-dir /scan
      --profile {profile}
      --human-logs
    environment:
      - JMO_THREADS=auto
      - JMO_TELEMETRY_DISABLE=1

  jmo-report:
    image: ghcr.io/jimmy058910/jmo-security:latest
    volumes:
      - ./results:/scan/results
    command: report /scan/results --profile
    depends_on:
      - jmo-security
"""

    elif workflow_type == "cicd":
        return f"""# docker-compose.security.yml
# JMo Security - CI/CD Audit
# Generated by wizard

version: '3.8'

services:
  jmo-security:
    image: ghcr.io/jimmy058910/jmo-security:latest
    volumes:
      - .:/scan:ro
      - ./results:/scan/results
    command: >
      ci
      --repos-dir /scan
      --profile {profile}
      --fail-on HIGH
      --human-logs
    environment:
      - JMO_THREADS=auto
"""

    elif workflow_type == "deployment":
        return f"""# docker-compose.security.yml
# JMo Security - Pre-Deployment Check
# Generated by wizard

version: '3.8'

services:
  jmo-security:
    image: ghcr.io/jimmy058910/jmo-security:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./results:/scan/results
    command: >
      ci
      --image myapp:latest
      --profile {profile}
      --fail-on CRITICAL
      --human-logs
    environment:
      - JMO_THREADS=auto
"""

    # Default template for repo/dependency workflows
    return f"""# docker-compose.security.yml
# JMo Security Scan
# Generated by wizard

version: '3.8'

services:
  jmo-security:
    image: ghcr.io/jimmy058910/jmo-security:latest
    volumes:
      - .:/scan:ro
      - ./results:/scan/results
    command: >
      scan
      --repo /scan
      --profile {profile}
      --human-logs
    environment:
      - JMO_THREADS=auto
      - JMO_TELEMETRY_DISABLE=1
"""
