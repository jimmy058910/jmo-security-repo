---
name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    # Nightly at 6 AM UTC for full lint check
    - cron: '0 6 * * *'

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Fast validation checks (2-3 minutes)
  quick-checks:
    name: quick-checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Validate GitHub workflows (actionlint)
        uses: reviewdog/action-actionlint@v1.68.0
        with:
          actionlint_flags: -color
          level: error
          fail_level: error

      - name: Validate YAML files (yamllint)
        run: |
          pip install yamllint
          yamllint -c .yamllint.yaml .

      - name: Validate requirements-dev.txt Python version
        run: |
          python -m pip install pip-tools
          python scripts/dev/update_dependencies.py --validate

      - name: Check deps-compile freshness
        run: |
          # Pin pip <25.3 until pip-tools supports pip 25.3's API changes
          # Issue: pip 25.3 removed InstallRequirement.use_pep517, breaking pip-tools 7.5.1
          # Tracking: https://github.com/jazzband/pip-tools/issues
          python -m pip install -U "pip<25.3" setuptools wheel pip-tools
          python -m piptools compile -o requirements-dev.txt requirements-dev.in
          git diff --exit-code -- requirements-dev.txt || (echo "requirements-dev.txt is out of date. Run: make deps-compile" && exit 1)

      - name: "Guardrails: forbid tracked venv/artifacts"
        run: bash scripts/dev/guardrails_check.sh

      - name: "Verify PyPI badge version matches pyproject.toml"
        run: |
          # Ensure badges auto-update correctly after releases
          # Detects version mismatches between local and PyPI
          bash scripts/dev/verify_badges.sh

      - name: "Lint Preview (subset of lint-full)"
        run: |
          # Install lint dependencies
          python -m pip install --upgrade 'pip<25.3'
          pip install -r requirements-dev.txt

          # Run critical lint checks (catches 80% of nightly failures early)
          echo "::group::Markdownlint"
          npx markdownlint-cli2 "**/*.md" "#node_modules" || echo "⚠️  Markdownlint issues found (non-blocking preview)"
          echo "::endgroup::"

          echo "::group::Mypy (scripts only)"
          mypy scripts/ || echo "⚠️  Mypy issues found (non-blocking preview)"
          echo "::endgroup::"

          echo "::group::Ruff"
          ruff check scripts/ tests/ || echo "⚠️  Ruff issues found (non-blocking preview)"
          echo "::endgroup::"

          echo "✅ Lint preview complete. Full lint-full runs nightly at 6 AM UTC."

      - name: Validate SARIF schema
        run: |
          echo "🔍 Validating SARIF schema compliance..."
          
          # Generate SARIF for validation
          python3 scripts/cli/jmo.py scan --repo . --tools trufflehog --results-dir /tmp/sarif-test
          python3 scripts/cli/jmo.py report /tmp/sarif-test
          
          # Install JSON schema validation tools
          python3 -m pip install jsonschema requests
          
          # Validate SARIF file with official SARIF 2.1.0 schema
          python3 -c "
          import json
          import jsonschema
          import requests
          import sys
          
          try:
              # Download official SARIF 2.1.0 schema
              schema_url = 'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/Schemata/sarif-schema-2.1.0.json'
              schema = requests.get(schema_url).json()
              
              # Load and validate SARIF file
              with open('/tmp/sarif-test/summaries/findings.sarif', 'r') as f:
                  sarif_data = json.load(f)
              
              jsonschema.validate(sarif_data, schema)
              print('✅ SARIF schema valid')
          except Exception as e:
              print(f'❌ SARIF validation failed: {e}')
              sys.exit(1)
          "

  # Test matrix runs in parallel, independent of quick-checks
  test-matrix:
    name: Test ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    permissions:
      contents: read
      id-token: write  # Needed for Codecov OIDC
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements-dev.txt

      - name: Install dependencies (with retry)
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: "1"
          PIP_DEFAULT_TIMEOUT: "60"
        run: |
          python -m pip install --upgrade 'pip<25.3'
          for attempt in 1 2 3; do
            echo "[deps] attempt ${attempt} to install requirements-dev.txt"
            if pip install -r requirements-dev.txt; then
              break
            fi
            sleep 5
          done
          # Install project in editable mode
          for attempt in 1 2 3; do
            echo "[deps] attempt ${attempt} to install project in editable mode"
            if pip install -e .; then
              break
            fi
            sleep 5
          done

      - name: Run tests (no coverage)
        if: ${{ !(matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11') }}
        env:
          CI: "true"
          PYTHONUTF8: "1"
          JMO_THREADS: "2"
        run: |
          python -m pytest -q --maxfail=1 --disable-warnings

      - name: Run tests with coverage (gate)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' }}
        env:
          CI: "true"
          PYTHONUTF8: "1"
          JMO_THREADS: "2"
        run: |
          python -m pytest -q \
            --maxfail=1 \
            --disable-warnings \
            --reruns 2 \
            --reruns-delay 2 \
            --cov=. \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=85

      - name: Upload coverage to Codecov
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' }}
        uses: codecov/codecov-action@v5.5.1
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true



  # Quick lint checks for PRs - formatters in check-only mode
  lint-quick:
    name: Lint (quick checks)
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade 'pip<25.3'
          pip install -r requirements-dev.txt

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-precommit-

      - name: Run pre-commit (quick checks)
        env:
          PRE_COMMIT_HOME: ~/.cache/pre-commit
          # Skip formatters (black, ruff --fix, shfmt) - check-only via separate hooks
          SKIP: black,ruff,shfmt,bandit,mypy
        run: |
          # Run core linting hooks
          pre-commit run --all-files trailing-whitespace
          pre-commit run --all-files end-of-file-fixer
          pre-commit run --all-files check-yaml
          pre-commit run --all-files check-json
          pre-commit run --all-files check-toml
          pre-commit run --all-files mixed-line-ending
          pre-commit run --all-files detect-private-key
          pre-commit run --all-files check-added-large-files

      - name: Check Python formatting (black --check)
        run: |
          black --check scripts/ tests/

      - name: Check Python linting (ruff check)
        run: |
          ruff check scripts/ tests/

      - name: Check shell formatting (shfmt -d)
        run: |
          shfmt -d -i 2 -ci -bn scripts/dev/*.sh scripts/core/*.sh 2>/dev/null || true

  # Full pre-commit lint suite - nightly only
  lint-full:
    name: Lint (full pre-commit suite)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Node.js 20
        uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade 'pip<25.3'
          pip install -r requirements-dev.txt

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-precommit-

      - name: Run pre-commit (full suite, all hooks)
        env:
          PRE_COMMIT_HOME: ~/.cache/pre-commit
          # Skip bandit (already covered by make lint)
          # Skip yamllint to avoid validating external pre-commit cache files
          SKIP: bandit,yamllint
        run: |
          pre-commit run --all-files --show-diff-on-failure
          # Run yamllint separately on our repo files only
          yamllint -c .yamllint.yaml .
