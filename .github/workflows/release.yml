---
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/jmo-security

permissions:
  contents: read
  packages: write
  id-token: write  # For OIDC (PyPI Trusted Publishers + GitHub OIDC)

jobs:
  # Build and publish Python package to PyPI
  pypi-publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    concurrency:
      group: release-pypi-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements-dev.txt

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Verify tag matches version
        run: |
          VERSION=$(python -c 'import tomllib,sys;print(tomllib.load(open("pyproject.toml","rb"))["project"]["version"])')
          TAG=${GITHUB_REF##*/}
          if [ "v$VERSION" != "$TAG" ]; then
            echo "Tag $TAG does not match project version v$VERSION" >&2
            exit 1
          fi

      - name: Build sdist/wheel
        run: python -m build

      - name: Check package metadata
        run: python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.ref_name }}
          path: dist/*

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@v1.12.4

  # Build and push multi-arch Docker images
  docker-build:
    name: Build Docker ${{ matrix.variant }}
    runs-on: ubuntu-latest
    needs: pypi-publish
    strategy:
      fail-fast: false
      matrix:
        variant: [full, slim, alpine]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Uncomment when Docker Hub credentials are configured
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY_DOCKERHUB }}
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            suffix=-${{ matrix.variant }},onlatest=true
            latest=false

      - name: Determine Dockerfile
        id: dockerfile
        run: |
          if [ "${{ matrix.variant }}" = "full" ]; then
            echo "file=Dockerfile" >> "$GITHUB_OUTPUT"
          else
            echo "file=Dockerfile.${{ matrix.variant }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.dockerfile.outputs.file }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant }}
          provenance: false
          sbom: false

      - name: Test image (amd64 only)
        run: |
          # Use the first tag from metadata output (e.g., 0.4.0-full)
          TEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | cut -d':' -f2)

          echo "Testing image: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${TEST_TAG}"
          docker pull --platform linux/amd64 "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${TEST_TAG}"
          docker run --rm --platform linux/amd64 "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${TEST_TAG}" --version
          docker run --rm --platform linux/amd64 "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${TEST_TAG}" --help

  # Scan Docker images for vulnerabilities
  docker-scan:
    name: Scan Docker ${{ matrix.variant }}
    runs-on: ubuntu-latest
    needs: docker-build
    strategy:
      matrix:
        variant: [full, slim, alpine]
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag
        id: tag
        run: |
          # For tags like v0.4.0, the image is tagged as 0.4.0-variant (without 'v')
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Strip 'v' prefix
            echo "value=${VERSION}-${{ matrix.variant }}" >> "$GITHUB_OUTPUT"
          else
            echo "value=latest-${{ matrix.variant }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.value }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.variant }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.variant }}.sarif'
          category: 'docker-${{ matrix.variant }}'

  # Update Docker Hub README (future)
  docker-hub-readme:
    name: Update Docker Hub README
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Placeholder
        run: echo "Docker Hub README update skipped (configure secrets first)"
      # Uncomment when Docker Hub is configured:
      # - name: Checkout repository
      #   uses: actions/checkout@v4
      #
      # - name: Update Docker Hub description
      #   uses: peter-evans/dockerhub-description@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      #     repository: ${{ env.IMAGE_NAME }}
      #     short-description: "JMo Security Suite - Terminal-first security audit toolkit"
      #     readme-filepath: ./docs/DOCKER_README.md
