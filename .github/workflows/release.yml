---
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_ECR_PUBLIC: public.ecr.aws
  IMAGE_NAME_GHCR: ${{ github.repository_owner }}/jmo-security  # GitHub: jimmy058910/jmo-security
  IMAGE_NAME_DOCKERHUB: jmogaming/jmo-security                  # Docker Hub: jmogaming/jmo-security
  IMAGE_NAME_ECR_PUBLIC: m2d8u2k1/jmo-security                  # ECR Public: public.ecr.aws/m2d8u2k1/jmo-security
  AWS_REGION: us-east-1                                         # ECR Public only exists in us-east-1

permissions:
  contents: read
  packages: write
  id-token: write         # For OIDC (PyPI Trusted Publishers + GitHub OIDC)
  security-events: write  # For uploading SARIF files to GitHub Security

jobs:
  # PRE-RELEASE GATE: Verify all tools are up-to-date before releasing
  pre-release-check:
    name: Verify tools up-to-date
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Check for outdated tools
        run: |
          echo "üîç Checking for outdated tools before release..."
          echo ""
          python3 scripts/dev/update_versions.py --check-latest || {
            echo ""
            echo "‚ùå ERROR: Cannot release with outdated tools!"
            echo ""
            echo "Found outdated tools. Update before releasing:"
            echo "  python3 scripts/dev/update_versions.py --update-all"
            echo "  python3 scripts/dev/update_versions.py --sync"
            echo "  git add versions.yaml Dockerfile*"
            echo "  git commit -m 'deps(tools): update all to latest before ${GITHUB_REF##*/}'"
            echo "  git tag ${GITHUB_REF##*/} --force"
            echo "  git push origin ${GITHUB_REF##*/} --force"
            echo ""
            echo "Alternatively, run the pre-release update workflow:"
            echo "  gh workflow run pre-release-update.yml -f version=${GITHUB_REF##*/v}"
            echo ""
            exit 1
          }

      - name: Report current tool versions
        run: |
          echo ""
          echo "‚úÖ All tools are up-to-date! Proceeding with release."
          echo ""
          python3 scripts/dev/update_versions.py --report

  # Build and publish Python package to PyPI
  pypi-publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    needs: pre-release-check  # BLOCKS release if tools are outdated
    if: startsWith(github.ref, 'refs/tags/v')
    concurrency:
      group: release-pypi-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: requirements-dev.txt

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Verify tag matches version
        run: |
          VERSION=$(python -c 'import tomllib,sys;print(tomllib.load(open("pyproject.toml","rb"))["project"]["version"])')
          TAG=${GITHUB_REF##*/}
          if [ "v$VERSION" != "$TAG" ]; then
            echo "Tag $TAG does not match project version v$VERSION" >&2
            exit 1
          fi

      - name: Validate README will render correctly on PyPI
        run: |
          echo "‚úÖ README.md will be published to PyPI from this release"
          echo "üìù Current README.md size: $(wc -c < README.md) bytes"
          echo "üìä Badge count: $(grep -c '!\[' README.md || echo 0)"
          echo ""
          echo "‚ö†Ô∏è  Note: If you see badge/content differences on PyPI after release,"
          echo "    run 'make validate-readme' locally to check for drift."

      - name: Build sdist/wheel
        run: python -m build

      - name: Check package metadata
        run: python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.ref_name }}
          path: dist/*

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          skip-existing: true  # Allow re-running releases if PyPI already has the version

  # Build and push multi-arch Docker images
  docker-build:
    name: Build Docker ${{ matrix.variant }}
    runs-on: ubuntu-latest
    needs: pypi-publish
    strategy:
      fail-fast: false
      matrix:
        variant: [full, slim, alpine]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: vars.DOCKERHUB_ENABLED == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials for ECR Public
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: arn:aws:iam::786980363770:role/GitHubActionsECRPublicRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}
            ${{ env.REGISTRY_ECR_PUBLIC }}/${{ env.IMAGE_NAME_ECR_PUBLIC }}
            ${{ vars.DOCKERHUB_ENABLED == 'true' && format('{0}/{1}', env.REGISTRY_DOCKERHUB, env.IMAGE_NAME_DOCKERHUB) || '' }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') && matrix.variant == 'full' }}
          flavor: |
            suffix=-${{ matrix.variant }},onlatest=${{ matrix.variant != 'full' }}
            latest=false

      - name: Determine Dockerfile
        id: dockerfile
        run: |
          if [ "${{ matrix.variant }}" = "full" ]; then
            echo "file=Dockerfile" >> "$GITHUB_OUTPUT"
          else
            echo "file=Dockerfile.${{ matrix.variant }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ steps.dockerfile.outputs.file }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.variant }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant }}
          provenance: false
          sbom: false

      - name: Test image (amd64 only)
        run: |
          # Use the first tag from metadata output (e.g., 0.4.0-full)
          TEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | cut -d':' -f2)

          echo "Testing GHCR image: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:${TEST_TAG}"
          docker pull --platform linux/amd64 "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:${TEST_TAG}"
          # Test basic commands (jmo CLI doesn't have --version, use --help instead)
          docker run --rm --platform linux/amd64 "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:${TEST_TAG}" --help
          docker run --rm --platform linux/amd64 "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:${TEST_TAG}" scan --help

          echo ""
          echo "Testing ECR Public image: ${{ env.REGISTRY_ECR_PUBLIC }}/${{ env.IMAGE_NAME_ECR_PUBLIC }}:${TEST_TAG}"
          docker pull --platform linux/amd64 "${{ env.REGISTRY_ECR_PUBLIC }}/${{ env.IMAGE_NAME_ECR_PUBLIC }}:${TEST_TAG}"
          docker run --rm --platform linux/amd64 "${{ env.REGISTRY_ECR_PUBLIC }}/${{ env.IMAGE_NAME_ECR_PUBLIC }}:${TEST_TAG}" --help
          docker run --rm --platform linux/amd64 "${{ env.REGISTRY_ECR_PUBLIC }}/${{ env.IMAGE_NAME_ECR_PUBLIC }}:${TEST_TAG}" scan --help

  # Benchmark image sizes (v0.6.1+ optimization tracking)
  docker-size-benchmark:
    name: Benchmark Docker Image Sizes
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag
        id: tag
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Strip 'v' prefix
            echo "value=${VERSION}" >> "$GITHUB_OUTPUT"
          else
            echo "value=latest" >> "$GITHUB_OUTPUT"
          fi

      - name: Pull and measure all variants
        run: |
          {
            echo "## Docker Image Size Comparison (v0.6.1 Optimizations)"
            echo ""
            echo "| Variant | Size (amd64) | Size (arm64) | Reduction vs v0.6.0 |"
            echo "|---------|--------------|--------------|---------------------|"
          } > size-comparison.md

          for VARIANT in full slim alpine; do
            TAG="${{ steps.tag.outputs.value }}-${VARIANT}"
            IMAGE="${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:${TAG}"

            echo "Measuring $IMAGE..."

            # Get size for amd64 platform from manifest
            SIZE_AMD64=$(docker manifest inspect "$IMAGE" | \
              jq -r '.manifests[] | select(.platform.architecture=="amd64") | .size' | \
              numfmt --to=iec-i --suffix=B --format="%.1f")

            # Get size for arm64 platform from manifest
            SIZE_ARM64=$(docker manifest inspect "$IMAGE" | \
              jq -r '.manifests[] | select(.platform.architecture=="arm64") | .size' | \
              numfmt --to=iec-i --suffix=B --format="%.1f")

            echo "| ${VARIANT} | ${SIZE_AMD64} | ${SIZE_ARM64} | TBD (manual comparison) |" >> size-comparison.md
          done

          {
            echo ""
            echo "**Optimization Goals (ROADMAP #1):**"
            echo "- Full: 1.5GB ‚Üí 900MB (40% reduction)"
            echo "- Slim: 700MB ‚Üí 400MB (43% reduction)"
            echo "- Alpine: 500MB ‚Üí 300MB (40% reduction)"
            echo ""
            echo "**Optimizations Applied:**"
            echo "- Multi-stage builds (separate builder and runtime stages)"
            echo "- Layer caching cleanup (apt cache, pip cache, Python bytecode)"
            echo "- Trivy DB pre-download (eliminates 30-60s scan delay)"
          } >> size-comparison.md

          cat size-comparison.md

      - name: Upload size comparison
        uses: actions/upload-artifact@v4
        with:
          name: docker-size-comparison-${{ steps.tag.outputs.value }}
          path: size-comparison.md

  # Scan Docker images for vulnerabilities
  docker-scan:
    name: Scan Docker ${{ matrix.variant }}
    runs-on: ubuntu-latest
    needs: docker-build
    strategy:
      matrix:
        variant: [full, slim, alpine]
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag
        id: tag
        run: |
          # For tags like v0.4.0, the image is tagged as 0.4.0-variant (without 'v')
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Strip 'v' prefix
            echo "value=${VERSION}-${{ matrix.variant }}" >> "$GITHUB_OUTPUT"
          else
            echo "value=latest-${{ matrix.variant }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}:${{ steps.tag.outputs.value }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.variant }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results-${{ matrix.variant }}.sarif'
          category: 'docker-${{ matrix.variant }}'

  # Update Docker Hub README
  docker-hub-readme:
    name: Update Docker Hub README
    runs-on: ubuntu-latest
    # Run on version tags (after docker-build) OR on manual workflow_dispatch
    needs: docker-build
    if: |
      always() &&
      (needs.docker-build.result == 'success' || needs.docker-build.result == 'skipped') &&
      (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Update Docker Hub description
        # Requires secrets: DOCKERHUB_USERNAME and DOCKERHUB_TOKEN (PAT with read/write/delete scope)
        # Create PAT at: https://hub.docker.com/settings/security
        # Add secrets at: https://github.com/${{ github.repository }}/settings/secrets/actions
        if: vars.DOCKERHUB_ENABLED == 'true'
        uses: peter-evans/dockerhub-description@v5
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME_DOCKERHUB }}
          short-description: "Security audit toolkit with 12 tools - scan repos, images, IaC, URLs, K8s in one unified CLI"
          readme-filepath: ./DOCKER_HUB_README.md

      - name: Docker Hub update skipped
        if: vars.DOCKERHUB_ENABLED != 'true'
        run: |
          echo "Docker Hub README update skipped."
          echo "To enable:"
          echo "1. Create Docker Hub PAT: https://hub.docker.com/settings/security"
          echo "2. Add secrets DOCKERHUB_USERNAME and DOCKERHUB_TOKEN"
          echo "3. Set repository variable DOCKERHUB_ENABLED=true"

  # Verify PyPI badges auto-update correctly after release
  verify-badges:
    name: Verify PyPI Badges
    runs-on: ubuntu-latest
    needs: pypi-publish
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Wait for PyPI to propagate (60s)
        run: |
          echo "‚è≥ Waiting 60s for PyPI to propagate the new version..."
          sleep 60

      - name: Verify badges match pyproject.toml
        run: |
          echo "üè∑Ô∏è  Verifying PyPI badges auto-update correctly..."
          bash scripts/dev/verify_badges.sh || {
            echo ""
            echo "‚ö†Ô∏è  Badge verification failed. This is often due to:"
            echo "  1. PyPI propagation delay (wait 2-5 minutes)"
            echo "  2. Badge CDN caching (wait 15-30 minutes)"
            echo "  3. Version mismatch (check pyproject.toml)"
            echo ""
            echo "Manual verification:"
            echo "  make verify-badges"
            exit 1
          }
