name: Automated Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch  # 0.7.1 → 0.7.2 (bug fixes)
          - minor  # 0.7.1 → 0.8.0 (new features, backwards compatible)
          - major  # 0.7.1 → 1.0.0 (breaking changes)
      changelog_entry:
        description: 'Changelog entry (brief summary of changes)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      release_branch: ${{ steps.create_branch.outputs.branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyyaml requests packaging toml

      - name: Update ALL tools to latest versions
        id: tool_updates
        run: |
          echo "Checking for tool updates..."
          python3 scripts/dev/update_versions.py --check-latest > check_output.txt || true
          cat check_output.txt

          if grep -q "UPDATE AVAILABLE" check_output.txt; then
            echo "Updating all tools to latest versions..."
            python3 scripts/dev/update_versions.py --update-all
            python3 scripts/dev/update_versions.py --sync
            echo "tools_updated=true" >> $GITHUB_OUTPUT
          else
            echo "All tools already up-to-date"
            echo "tools_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Bump version in pyproject.toml
        id: bump
        run: |
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Bump version based on input
          case "${{ inputs.version_bump }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"

          # Update pyproject.toml
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          TODAY=$(date +%Y-%m-%d)

          # Create new changelog entry
          echo "## [$NEW_VERSION] - $TODAY" > new_entry.md
          echo "" >> new_entry.md
          echo "### Summary" >> new_entry.md
          echo "" >> new_entry.md
          echo "${{ inputs.changelog_entry }}" >> new_entry.md
          echo "" >> new_entry.md
          echo "### Changes" >> new_entry.md
          echo "" >> new_entry.md

          # Add tool updates if any
          if [[ "${{ steps.tool_updates.outputs.tools_updated }}" == "true" ]]; then
            echo "**Security Tool Updates:**" >> new_entry.md
            echo "" >> new_entry.md
            git diff versions.yaml | grep "^[+-]  version:" | while read line; do
              echo "- $line" >> new_entry.md
            done
            echo "" >> new_entry.md
          fi

          # Insert new entry after "# Changelog" header
          sed -i "/^# Changelog/r new_entry.md" CHANGELOG.md

      - name: Create release branch
        id: create_branch
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          BRANCH="release-v${NEW_VERSION}"

          git checkout -b "$BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Commit release changes
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"

          git add pyproject.toml CHANGELOG.md

          # Add tool updates if any
          if [[ "${{ steps.tool_updates.outputs.tools_updated }}" == "true" ]]; then
            git add versions.yaml Dockerfile Dockerfile.slim Dockerfile.alpine
          fi

          # Create commit
          cat > commit_message.txt << 'COMMIT_MSG'
          release: v$NEW_VERSION

          $CHANGELOG_ENTRY

          This release includes:
          - Version bump: $VERSION_BUMP
          - All security tools updated to latest versions
          - CHANGELOG.md updated

          🤖 Generated with [Claude Code](https://claude.com/claude-code)

          Co-Authored-By: Claude <noreply@anthropic.com>
          COMMIT_MSG

          # Substitute variables
          sed -i "s/\$NEW_VERSION/${NEW_VERSION}/g" commit_message.txt
          sed -i "s/\$CHANGELOG_ENTRY/${{ inputs.changelog_entry }}/g" commit_message.txt
          sed -i "s/\$VERSION_BUMP/${{ inputs.version_bump }}/g" commit_message.txt

          git commit -F commit_message.txt

      - name: Push release branch
        run: |
          BRANCH="${{ steps.create_branch.outputs.branch }}"
          git push origin "$BRANCH"

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          BRANCH="${{ steps.create_branch.outputs.branch }}"

          # Create PR body
          echo "## Release v${NEW_VERSION}" > pr_body.txt
          echo "" >> pr_body.txt
          echo "### Summary" >> pr_body.txt
          echo "" >> pr_body.txt
          echo "${{ inputs.changelog_entry }}" >> pr_body.txt
          echo "" >> pr_body.txt
          echo "### Changes in this release" >> pr_body.txt
          echo "" >> pr_body.txt
          echo "**Version Bump:** ${{ inputs.version_bump }}" >> pr_body.txt
          echo "" >> pr_body.txt
          echo "**Tool Updates:**" >> pr_body.txt

          # Add tool update details
          if [[ "${{ steps.tool_updates.outputs.tools_updated }}" == "true" ]]; then
            git diff origin/main..HEAD versions.yaml | grep "^[+-]  version:" | while read line; do
              echo "- $line" >> pr_body.txt
            done
          else
            echo "- All tools already up-to-date" >> pr_body.txt
          fi

          echo "" >> pr_body.txt
          echo "### Pre-Release Checklist" >> pr_body.txt
          echo "" >> pr_body.txt
          echo "- ✅ All security tools updated to latest versions" >> pr_body.txt
          echo "- ✅ Version bumped in pyproject.toml" >> pr_body.txt
          echo "- ✅ CHANGELOG.md updated" >> pr_body.txt
          echo "- ⏳ CI tests pending" >> pr_body.txt
          echo "" >> pr_body.txt
          echo "### Release Process" >> pr_body.txt
          echo "" >> pr_body.txt
          echo "1. **Merge this PR** to main" >> pr_body.txt
          echo "2. **Workflow will automatically:**" >> pr_body.txt
          echo "   - Create git tag v${NEW_VERSION}" >> pr_body.txt
          echo "   - Publish to PyPI via Trusted Publishers" >> pr_body.txt
          echo "   - Build and push Docker images" >> pr_body.txt
          echo "   - Create GitHub release" >> pr_body.txt
          echo "" >> pr_body.txt
          echo "---" >> pr_body.txt
          echo "" >> pr_body.txt
          echo "🤖 **Automated Release PR**" >> pr_body.txt
          echo "📅 **Created**: $(date +%Y-%m-%d)" >> pr_body.txt
          echo "🔗 **Workflow**: \`.github/workflows/automated-release.yml\`" >> pr_body.txt

          # Create PR
          gh pr create \
            --title "release: v${NEW_VERSION}" \
            --body-file pr_body.txt \
            --base main \
            --head "$BRANCH" \
            --label "release"

      - name: Summary
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          BRANCH="${{ steps.create_branch.outputs.branch }}"

          echo "## Automated Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Release PR created successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${NEW_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ inputs.version_bump }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${BRANCH}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the pull request" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify CI tests pass" >> $GITHUB_STEP_SUMMARY
          echo "3. Merge the PR to trigger release workflow" >> $GITHUB_STEP_SUMMARY

  finalize-release:
    name: Finalize release (after PR merge)
    runs-on: ubuntu-latest
    needs: prepare-release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push git tag
        run: |
          NEW_VERSION="${{ needs.prepare-release.outputs.new_version }}"

          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

          echo "✅ Tag v${NEW_VERSION} created and pushed"
          echo "Release workflow will now automatically publish to PyPI and Docker Hub"
