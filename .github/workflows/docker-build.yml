---
name: Docker Build and Push

on:
  # Only build Docker images on version tags and manual triggers
  # Saves ~8 minutes of CI time per push
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile*'
      - 'scripts/**'
      - 'pyproject.toml'
      - '.github/workflows/docker-build.yml'
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'false'

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/jmo-security

permissions:
  contents: read
  packages: write
  id-token: write  # For OIDC

jobs:
  build-and-push:
    name: Build ${{ matrix.variant }} (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant: [full, slim, alpine]
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Uncomment when Docker Hub credentials are configured
      # - name: Log in to Docker Hub
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY_DOCKERHUB }}
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          flavor: |
            suffix=-${{ matrix.variant }},onlatest=true
            latest=false

      - name: Determine Dockerfile
        id: dockerfile
        run: |
          if [ "${{ matrix.variant }}" = "full" ]; then
            echo "file=Dockerfile" >> "$GITHUB_OUTPUT"
          else
            echo "file=Dockerfile.${{ matrix.variant }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.dockerfile.outputs.file }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' || github.event.inputs.push_images == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Test image
        if: matrix.platform == 'linux/amd64'
        run: |
          docker run --rm ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.variant }} --version
          docker run --rm ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.variant }} --help

  create-manifest:
    name: Create multi-arch manifest for ${{ matrix.variant }}
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        variant: [full, slim, alpine]

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          # Extract tag (use 'latest' for main branch, otherwise use git ref)
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            TAG="latest"
          elif [ "${GITHUB_REF#refs/tags/}" != "${GITHUB_REF}" ]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="${GITHUB_REF#refs/heads/}"
          fi

          VARIANT_SUFFIX=""
          if [ "${{ matrix.variant }}" != "full" ]; then
            VARIANT_SUFFIX="-${{ matrix.variant }}"
          fi

          # Create manifest for amd64 + arm64
          docker buildx imagetools create -t \
            "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${TAG}${VARIANT_SUFFIX}" \
            "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.variant }}"

      - name: Inspect manifest
        run: |
          TAG="latest"
          if [ "${GITHUB_REF#refs/tags/}" != "${GITHUB_REF}" ]; then
            TAG="${GITHUB_REF#refs/tags/}"
          fi

          VARIANT_SUFFIX=""
          if [ "${{ matrix.variant }}" != "full" ]; then
            VARIANT_SUFFIX="-${{ matrix.variant }}"
          fi

          docker buildx imagetools inspect \
            "${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${TAG}${VARIANT_SUFFIX}"

  scan-images:
    name: Scan ${{ matrix.variant }} for vulnerabilities
    runs-on: ubuntu-latest
    needs: create-manifest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        variant: [full, slim, alpine]

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.variant }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.variant }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.variant }}.sarif'
          category: 'docker-${{ matrix.variant }}'

  publish-readme:
    name: Update Docker Hub README
    runs-on: ubuntu-latest
    needs: create-manifest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Uncomment when Docker Hub is configured
    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v4
    #
    #   - name: Update Docker Hub description
    #     uses: peter-evans/dockerhub-description@v3
    #     with:
    #       username: ${{ secrets.DOCKERHUB_USERNAME }}
    #       password: ${{ secrets.DOCKERHUB_TOKEN }}
    #       repository: ${{ env.IMAGE_NAME }}
    #       short-description: "JMo Security Suite - Terminal-first security audit toolkit"
    #       readme-filepath: ./docs/DOCKER_README.md
    steps:
      - name: Placeholder
        run: echo "Docker Hub README update skipped (configure secrets first)"
