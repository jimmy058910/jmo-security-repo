# JMo Security Suite - Alpine Docker Image
# Base: Alpine Linux 3.18 for minimal size
# Size: ~300MB (optimized from ~500MB) | Tools: 7 core scanners (v0.6.1) with minimal footprint
# v0.6.1: Docker optimization (multi-stage builds, layer caching, Trivy DB pre-download)

#
# Stage 1: Builder - Download and extract tools
#
FROM alpine:3.18 AS builder

ARG TARGETARCH

# Install build dependencies
RUN apk add --no-cache \
    curl \
    wget \
    ca-certificates

# Download TruffleHog
RUN TRUFFLEHOG_VERSION="3.90.11" && \
    TRUFFLEHOG_ARCH=$([ "$TARGETARCH" = "arm64" ] && echo "arm64" || echo "amd64") && \
    wget -q "https://github.com/trufflesecurity/trufflehog/releases/download/v${TRUFFLEHOG_VERSION}/trufflehog_${TRUFFLEHOG_VERSION}_linux_${TRUFFLEHOG_ARCH}.tar.gz" \
    -O /tmp/trufflehog.tar.gz && \
    tar -xzf /tmp/trufflehog.tar.gz -C /tmp && \
    mv /tmp/trufflehog /usr/local/bin/trufflehog && \
    chmod +x /usr/local/bin/trufflehog

# Download Syft
RUN SYFT_VERSION="1.34.2" && \
    SYFT_ARCH=$([ "$TARGETARCH" = "arm64" ] && echo "arm64" || echo "amd64") && \
    wget -q "https://github.com/anchore/syft/releases/download/v${SYFT_VERSION}/syft_${SYFT_VERSION}_linux_${SYFT_ARCH}.tar.gz" \
    -O /tmp/syft.tar.gz && \
    tar -xzf /tmp/syft.tar.gz -C /usr/local/bin syft

# Download Trivy
RUN TRIVY_VERSION="0.67.2" && \
    TRIVY_ARCH=$([ "$TARGETARCH" = "arm64" ] && echo "ARM64" || echo "64bit") && \
    wget -q "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-${TRIVY_ARCH}.tar.gz" \
    -O /tmp/trivy.tar.gz && \
    tar -xzf /tmp/trivy.tar.gz -C /usr/local/bin trivy

# Download Hadolint
RUN HADOLINT_VERSION="2.12.0" && \
    HADOLINT_ARCH=$([ "$TARGETARCH" = "arm64" ] && echo "arm64" || echo "x86_64") && \
    wget -q "https://github.com/hadolint/hadolint/releases/download/v${HADOLINT_VERSION}/hadolint-Linux-${HADOLINT_ARCH}" \
    -O /usr/local/bin/hadolint && \
    chmod +x /usr/local/bin/hadolint

# Download OWASP ZAP
RUN ZAP_VERSION="2.16.1" && \
    wget -q "https://github.com/zaproxy/zaproxy/releases/download/v${ZAP_VERSION}/ZAP_${ZAP_VERSION}_Linux.tar.gz" \
    -O /tmp/zap.tar.gz && \
    tar -xzf /tmp/zap.tar.gz -C /opt && \
    mv /opt/ZAP_${ZAP_VERSION} /opt/zaproxy

#
# Stage 2: Runtime - Minimal Alpine runtime environment
#
FROM alpine:3.18 AS runtime

LABEL org.opencontainers.image.title="JMo Security Suite (Alpine)"
LABEL org.opencontainers.image.description="Ultra-lightweight security toolkit with 7 core scanners + multi-target scanning (v0.6.1 optimized) based on Alpine Linux"
LABEL org.opencontainers.image.authors="James Moceri <general@jmogaming.com>"
LABEL org.opencontainers.image.url="https://jmotools.com"
LABEL org.opencontainers.image.source="https://github.com/jimmy058910/jmo-security-repo"
LABEL org.opencontainers.image.licenses="MIT"

ENV PYTHONUNBUFFERED=1 \
    PATH="/root/.local/bin:${PATH}"

# Install ONLY runtime dependencies (Alpine packages are smaller)
# No build tools in runtime stage
RUN apk add --no-cache \
    python3 \
    py3-pip \
    git \
    ca-certificates \
    jq \
    bash \
    openjdk17-jre-headless \
    && ln -sf python3 /usr/bin/python

# Upgrade pip and install Python tools with cache cleanup
# Platform-specific handling for semgrep/checkov (ARM64 has rustworkx build issues)
ARG TARGETARCH
RUN python3 -m pip install --no-cache-dir --break-system-packages --upgrade pip setuptools wheel && \
    if [ "$TARGETARCH" = "amd64" ]; then \
        python3 -m pip install --no-cache-dir --break-system-packages \
            semgrep==1.99.0 \
            checkov==3.2.255; \
    else \
        echo "Skipping semgrep/checkov on ARM64 (rustworkx build time)"; \
    fi && \
    find /usr/lib/python3* -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true && \
    find /usr/lib/python3* -type f -name '*.pyc' -delete 2>/dev/null || true

# Copy compiled binaries from builder stage
COPY --from=builder /usr/local/bin/trufflehog /usr/local/bin/trufflehog
COPY --from=builder /usr/local/bin/syft /usr/local/bin/syft
COPY --from=builder /usr/local/bin/trivy /usr/local/bin/trivy
COPY --from=builder /usr/local/bin/hadolint /usr/local/bin/hadolint
COPY --from=builder /opt/zaproxy /opt/zaproxy

# Create ZAP symlink
RUN ln -s /opt/zaproxy/zap.sh /usr/local/bin/zap && \
    chmod +x /usr/local/bin/zap

# REMOVED: Trivy DB pre-download (adds 800MB to image size)
# Instead, use volume mounting for persistent caching across scans
# Mark Trivy cache directory as volume for persistence
VOLUME ["/root/.cache/trivy"]

WORKDIR /scan

# Copy JMo Security Suite
COPY . /opt/jmo-security/

# Install JMo with cache cleanup
RUN cd /opt/jmo-security && \
    python3 -m pip install --no-cache-dir --break-system-packages -e . && \
    find /usr/lib/python3* -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true && \
    find /usr/lib/python3* -type f -name '*.pyc' -delete 2>/dev/null || true

# Verify tools (platform-specific)
ARG TARGETARCH
RUN echo "=== Verifying Alpine tools (${TARGETARCH}) ===" && \
    python3 --version && \
    jmo --help > /dev/null && \
    trufflehog --version && \
    syft version && \
    trivy --version && \
    hadolint --version && \
    zap -version && \
    if [ "$TARGETARCH" = "amd64" ]; then \
        semgrep --version && \
        checkov --version; \
    else \
        echo "Skipped: semgrep/checkov (ARM64 - rustworkx build time)"; \
    fi && \
    echo "=== Alpine tools verified ==="

ENTRYPOINT ["jmo"]
CMD ["--help"]

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD jmo --help > /dev/null || exit 1

# Usage examples:
# docker run --rm -v $(pwd):/scan ghcr.io/jimmy058910/jmo-security:0.6.1-alpine scan --repo /scan --profile fast
# docker run --rm -v $(pwd):/scan -v trivy-cache:/root/.cache/trivy ghcr.io/jimmy058910/jmo-security:0.6.1-alpine ci --repo /scan --fail-on HIGH
#
# Optimizations in v0.6.1:
# - Multi-stage builds: Separated build and runtime environments
# - Alpine base: Minimal footprint with musl libc
# - Layer caching: Aggressive cleanup of package manager caches and Python bytecode
# - Trivy DB pre-download: Pre-cached vulnerability database
